// Generated by CoffeeScript 1.3.1
var Map,
  __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Map = (function() {

  Map.name = 'Map';

  function Map(server, sceneryTable) {
    var _this = this;
    this.server = server;
    this.sceneryTable = sceneryTable;
    this.loadPart = __bind(this.loadPart, this);

    this.drawArea = __bind(this.drawArea, this);

    this.lastPartLoaded = -1;
    this.objects = {
      obstacles: [],
      speedup: [],
      slowdown: []
    };
    this.loadPart(3);
    this.server.onMapSegment(function(data) {
      var e, _i, _len, _ref, _results;
      console.log('map data', data);
      _ref = data.obstacles;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        e = _ref[_i];
        _results.push((function(e) {
          return _this.objects.obstacles.push(e);
        })(e));
      }
      return _results;
    });
  }

  Map.prototype.drawArea = function(lowerY) {
    var color, height, width, x, y, _i, _results;
    width = 48;
    height = 57;
    _results = [];
    for (y = _i = 0; 0 <= height ? _i <= height : _i >= height; y = 0 <= height ? ++_i : --_i) {
      _results.push((function() {
        var _j, _results1;
        _results1 = [];
        for (x = _j = 0; 0 <= width ? _j <= width : _j >= width; x = 0 <= width ? ++_j : --_j) {
          color = [x * 5, y * 3, x, 1];
          _results1.push(this.sceneryTable.setPixel(x, y, color));
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  Map.prototype.loadPart = function(part) {
    var i, start, _i;
    start = this.lastPartLoaded + 1;
    for (i = _i = start; start <= part ? _i < part : _i > part; i = start <= part ? ++_i : --_i) {
      this.server.askForMapSegment(i);
    }
    return this.lastPartLoaded = part;
  };

  return Map;

})();
